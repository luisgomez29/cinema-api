allprojects {
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
}

apply plugin: 'info.solidsoft.pitest.aggregator'

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'info.solidsoft.pitest'
    apply plugin: 'io.spring.dependency-management'

    compileJava.dependsOn validateStructure
    sourceCompatibility = JavaVersion.VERSION_17

    dependencies {
        implementation 'io.projectreactor:reactor-core'
        implementation 'io.projectreactor.addons:reactor-extra'
        implementation platform("software.amazon.awssdk:bom:${awssdkVersion}")
        testImplementation 'io.projectreactor:reactor-test'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.projectreactor.tools:blockhound-junit-platform:1.0.9.RELEASE'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    }

    ext['jackson-bom.version'] = '2.17.2'
    ext['log4j2.version'] = '2.23.1'

    pitest {
        targetClasses = ['co.com.luisgomez29.*']
        verbose = true
        outputFormats = ['XML', 'HTML']
        threads = 8
        exportLineCoverage = true
        junit5PluginVersion = '1.2.1'
        pitestVersion = '1.16.2'
        timestampedReports = false
        failWhenNoMutations = false
        excludedClasses = [
                'co.com.luisgomez29.model.*'
        ]
        jvmArgs = [
                "-XX:+AllowRedefinitionToAddDeleteMethods"
        ]
    }

    test {
        useJUnitPlatform()
    }

    tasks.withType(Test).configureEach {
        if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_13)) {
            jvmArgs += [
                    "-XX:+AllowRedefinitionToAddDeleteMethods"
            ]
        }
    }

    test.finalizedBy(project.tasks.jacocoTestReport)

    jacocoTestReport {
        dependsOn test
        reports {
            xml.setRequired true
            xml.setOutputLocation layout.buildDirectory.file("reports/jacoco.xml")
            csv.setRequired false
            html.setOutputLocation layout.buildDirectory.dir("reports/jacocoHtml")
        }
    }

}

jacoco {
    toolVersion = "${jacocoVersion}"
    reportsDirectory.set(layout.buildDirectory.dir("reports"))
}

tasks.register('jacocoMergedReport', JacocoReport) {
    dependsOn = [test, subprojects.jacocoTestReport]
    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
    reports {
        xml.setRequired true
        csv.setRequired false
        html.setRequired true
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}

tasks.named('wrapper') {
    gradleVersion = '8.10'
    distributionSha256Sum = '5b9c5eb3f9fc2c94abaea57d90bd78747ca117ddbbf96c859d3741181a12bf2a'
}
